# .github/workflows/docker-build-and-deploy.yml
name: Build, Push Docker Image, and Deploy

on:
  push:
    branches:
      - main  # Runs on a push to the 'main' branch

jobs:
  build:
    # This job runs on your self-hosted runner
    runs-on: self-hosted

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Install Docker (if not already installed)
      - name: Install Docker
        run: |
          if ! [ -x "$(command -v docker)" ]; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
            newgrp docker
          fi

      # Step 3: Set up Docker Buildx (build tool for Docker)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 4: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username stored as a secret in GitHub
          password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub password stored as a secret in GitHub

      # Step 5: Build the Docker image and push to Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .  # Root of the repository
          file: ./Dockerfile  # Path to the Dockerfile
          push: true
          tags: your-dockerhub-username/simple-app:latest  # Replace with your Docker Hub image name

  deploy:
    # This job also runs on your self-hosted runner after the build
    runs-on: self-hosted
    needs: build

    steps:
      # Step 1: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 2: Pull the new Docker image from Docker Hub
      - name: Pull the latest Docker image
        run: docker pull your-dockerhub-username/simple-app:latest

      # Step 3: Stop and remove the existing container (if running)
      - name: Stop and remove existing container
        run: |
          if [ "$(docker ps -q -f name=simple-app)" ]; then
            docker stop simple-app
            docker rm simple-app
          fi

      # Step 4: Run the new container on the server
      - name: Run new Docker container
        run: |
          docker run -d --name simple-app -p 80:80 your-dockerhub-username/simple-app:latest
